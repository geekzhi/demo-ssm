package com.geekzhang.demo;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.domain.AlipayTradePayModel;
import com.alipay.api.request.AlipayTradePayRequest;
import com.alipay.api.request.AlipayTradePrecreateRequest;
import com.alipay.api.response.AlipayTradePayResponse;
import com.alipay.api.response.AlipayTradePrecreateResponse;
import com.aliyuncs.DefaultAcsClient;
import com.aliyuncs.IAcsClient;
import com.aliyuncs.exceptions.ClientException;
import com.aliyuncs.green.model.v20170825.TextScanRequest;
import com.aliyuncs.http.FormatType;
import com.aliyuncs.http.HttpResponse;
import com.aliyuncs.profile.DefaultProfile;
import com.aliyuncs.profile.IClientProfile;
import com.geekzhang.demo.util.HttpUtils;
import lombok.Data;
import org.apache.http.util.EntityUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.File;
import java.math.BigDecimal;
import java.util.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoApplicationTests {

	@Test
	public void contextLoads() {
	}

	@Test
	public void ss() throws Exception{
		String host = "http://rlsbbd.market.alicloudapi.com";
		String path = "/face/verify";
		String method = "POST";
		String appcode = "fd047937ee894eb1be93586d653ecdb9";
		Map<String, String> headers = new HashMap<String, String>();
		//最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105
		headers.put("Authorization", "APPCODE " + appcode);
		//根据API的要求，定义相对应的Content-Type
		headers.put("Content-Type", "application/json; charset=UTF-8");
		Map<String, String> querys = new HashMap<String, String>();
		JSONObject json = new JSONObject();
		json.put("type", "1");
		json.put("content_1", "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/2wBDAQMDAwQDBAgEBAgQCwkLEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBD/wAARCAB4ASwDASIAAhEBAxEB/8QAHQABAAMBAAMBAQAAAAAAAAAAAAYHCAUCAwQJAf/EAEQQAAEDAwMCAwQGBAsJAAAAAAEAAgMEBREGEiEHMRNBUQgiYXEUMoGRocEVI0LwFiQzRFJysbK00eEJNDdzdIKSwvH/xAAbAQEAAgMBAQAAAAAAAAAAAAAAAwUBAgQGB//EAC8RAAICAQMDAwIDCQAAAAAAAAABAgMRBBIhBTFBEyJRBnEUgaEyM2GRscHR8PH/2gAMAwEAAhEDEQA/AIk20SRxgvftaQQ4AEkj4E4x5+X5L457dRXWcWitZKI65r4X7Gta7BYSeQTg/f8AmpNM2QxEF2SefeAyfPy+Pz4XCZ+puVO/bwwuIyeSNhGfxVIsLg7ERWToLp2OpNZBqO/RsY8TRwmoidFG/cXZY0x4HvOJ49SvFnQ7p7T1sFxmppHVEG3bMaiRrg4Dv7jgM/v5qcVFe4hoBJ3Dg/d2ys+9Z+tMtFPU6U0vVSMqY3GKsqmkYbxyxhOTnJwTwQRwumNl1vtTMOMYvOCxtV+0lp/RtmstnttC2717ohNUxx1m1tLxjY521xLs5yDyAAT3CrKzdZYayfZeLWKeAu2maJxdsB7bgRz28s/Ljmg2TP8AF3F5PC6lqromzDxg8s590OwXfD4eas9HZPRfu39zhvqhqP20bLtldadS6SprfWXIUlLJUtdSVkcu18UrHtmZICCDjJGcEEgDBBwRxKi49WbTeJqCso236e10jYo4KaujbHPj3WPLiC/J2e8HYycOOPOjtHdQKzTjZ9PPl+j0V0AibI1zRJRPPd7XO+qC3h3Y9iCCFOejHUSwaB1HV6mvdvNVb5KOWlMe/JYXvbtORjJyMfauTVXT9WU2sqTzj/BYaXS120pZacF/MqfqhZOpdNqb9Ka609cKCa4kik8VpdG5ke3LI5Blsm0PZnBJy4F3LuedcqDUFkaygu1MKYytDml0jnBzCAS4bctII9M9j2WqPaI9oTQnVhmhrZpm0RU1Hp1k8ss1PuZI4TMb4kTfRhdFHuJzud6bCT6ukurNMaihuumr9Q0lbRyFlZHT1MLHxM+s0lgIwxw38kYOXfBS1WppOSwcVsUm9pzujHVKnh6SU+lq+F/6QpKyqpIRF7rhCS2XxJCeQcyva3A52AcLLHXK6svfVO+3KPbsldAGFrtwLWwRtBz8QM/DstLVuh7HF1BvFi07cBbRPTR1tvawePGWtyySMlzt7DzD5njceeAsvdW7NV6f6hXa0VzYWz05h3+C4lhLoWOyMgcHOewxnsFNsqS3QfL8EMLLZSxNcfJEERFgmCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgP1AqH4iecNAb9Ucc/BcAuYK9rDI1j/CkcAB3Ac0fPsV0bvUy0tuqqmnEYlax2zxAS1jj2Lsc7RkE45woLBLc662STunkqqhtPVQiWJzA6ZplAD2FnAdtacY88KkSeDs4Pfr/WVJonS1Zeq6RkjoYzHAwnAlmcPdaPzxnABPksWV1fVV9VNW1cplqKmR00zz3c9xJcftJKs/2gaeayy2DT0TphQMoo7hDFKcuY+oijfI3IxwHFwAxwPmqroIn1FRHHjO5waFYUQ2x3fJBN7ngRty7J7gL77RR1FXUu8CEybASfn5KRWrRdZW3RkIgLWl4cT243AEfNXHoTpnT0TqqaSDZDLG09uXd89x2zwpJ3xriT06SVrKfqtO3CXwHxUTjhp3Nazl/B5+PYr12nU0LbfPRVNNO6Q7WvmZMGhrN7cHGw+fB78Htlbf0J0kst2qqOGW37oXCSeVziTmTZsY3DhjHvvPwICxP1G0y7RWtdXabbC4soamWCLywwVDSwn5gfio67o3eOUb3aeWmeE+Hx+hP6DpZrd+mob7aNKC5UP0KlqGPiqnPIjnldGxuMtOQRucADtaQ52ByIRdrrf9HXm52ae2xW642hrXOaGB5a4uZjBJcHNLH9wcEHI8lsbonpx1V0LrL2+mgkkfpO3Np3SgEA/SpuQTnH8oB9/yWbusNht8fW7UFiu9a2mqn6fpXSyO5g8T9ERTtOQNzQ0iMY2uJwTnOGqwhJSh2KqUcNlbUHUTUcVWyohq2073F259PCyN5J+LQD6KF65uk961RV3KpkfJLK2EOc+QvcS2Jjckn5fZ2Vr0mlLTdatkTrFc3Qi3OlxY6iC7kVBeMZEbg6mi254eZHjaM53HFPaoijg1BWwQvkfHHJsY6Vmx7mgAAub5HHcKNy3EqrUeUctERYMhERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQH6W3y40FttlZcbnK1lLSwyTTOc0uwxrS53AyTwDwPRRTT11prlboa6kdHI2aihlD42lrSHgnIacEZPODz6qRXR1lH6rUDon22SRkdRHKAWSMJw5pB4OQSMFRXTNtpLNFPS29rPDgpqenjY0+61oc/Hf8Arc/AKlWMHZy3hFIe1S41OprPWiMhrqBkGS0Al0bWtPY9s9vgR8VEem2kIbzFLX1Zc2OJzdpxxnnPw9FMPaSp7dLVWSvoaxlQ/ZLTzhsheY3NIcA448w/1J4PlhSHpJbqKDS9E+pDAZsP2l2CS52Rx3JJA4+K7oNqlKPkzRWpW4l4O/piq05RVcVLWxvimzkEt7emfj+auSKggZRwS0sbS2TAy3HABGPmoqYrXVUuyfTdY5zGZ3/o+XGBydztuAPPnjhdrS9wprpRtZaZ2TxRuc0bXZA7gjPwII+xY1OlnVh2xcfumv6l5p5Y4yi3tFaq03Zo20tdO1la5xETNhcH4H1c+R9MrE/tXNoB1uv1eyNzaS4CKUNIIywxRkg+YIkDwfQhaT0JrTp5S6xpINR3SgiDZmeK6eZoDRnvyewwfuVMe3rLZLr1e/Sun62kqqGtt0VSyopntdHNumnG8FvByAO3oo9PGMZcfBw69Sa5K9oPaL6h2jTdPpO26tkhtMFGygjpmUcO3wGOLmsJLMnB8yc9uVEtQ61i1Vc5b1qF7q64TtayapfG0Sva2PwgC4AEgRgNx6BRGKkMoHOAO3wXvNCARkDk4810qW3sVXplvXXX/SOq6X2m0xaMpYtV0oIlq6ShjgDW+K4Ze4DMzzG1nB4G4nORhUBrWvFz1NV1rd2HiIDcckBsTW/kpC+LY0uAGMe8cKIXwEXSbPf3f7oW9byzSUcHwoiKU0CIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgNS+1FV1DpNPSwVQidE6pDdji15JEfIx5D/ANvPlfTpLUNRUaHphXaopaKolhiYZJ6lrHva1mTy45z77efkoX1Ss9ZapYZL9dTcnvikeyEUxhaxo2jeRnI3EgeufPAIUw6b+z5pfVmlxd7peLuZXTFrPBdG1gbsaezmOPn69sLhW1UrLOnlT3I+fVdpsurNNQ2K3agt89ZC/wAelgp52Pe8gOyAM57ZcT8yVK+h1iukFkNa3dulo6Y0p3bgyPkSBw4I3OMWO/AcMjz+iydALFo+7w3+ivFfO+jbIWMm2FuC1zTnaB5OJHxVgdHIG0Gm7dG3a5rqKGF4IByAGnH3tCtOg9Rr6b1KjUWcxjJN8fr/AHOqqj1YNrv/AMPnr9JawltbauC91sFRBM4yCOpexj2ZaQNjCBkbS3ByCHnzAXw6SpNQX7UN5loa240dVRUBpi6jdFuc+MybiI5I5G7jj0J27cYyFcFZW01PT7GUjXSY907sYI+zlcro1LBRdQqSSOH6lVh+0Y9/jIJx8MH5L6B9d/Weg6z05aXTJOWVyljju+6/3JPpNBKFm55wyA3DRFy1LetN1Nn1NXaToYpzNPWUXjQzCm2txtYxzRn3fd7DDwcHGDR/tNVd5m6g3uWvjr5qWRttjjraiAM8d7KRjN7QR7jX4ldtacZIyMgEbvptM0B1lWUUtGSyiq3sbG7LzIzd7r3HJJLshzj5lxPnhVB/tCtG3Ctm0v8ARJKSmbdofEqGBhLmmkaWRbTgfs1UmRj9lvpz831vUIdT1nq11qEWksL5S5f59zXUaf8AD0JNtvzkwKyoqOdkmB5Dj/JeYqKgd5TjPfI4Uuh6VVr/AHXXtjTgZHh+X3r2u6TzsGX3wgFwbxDx3+fosKl/BVuxEOikfJukle7w2HAGe5+5Ra+PL7pO89zt/uhXA/pRJ4Icb0QAOAKfgfH6yqvWdpfY9S1lrkm8V0Ph5fjGd0bXfmsqtw5ZrKalwjioiLY1CIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgND9ZrFqys1JU18FMJqCohhgHh7WyNa1xJYec8uO7jjG3040B0Tt01B0/pY5nH9bM9/HcNGG/byz8Vwb3RRP96RjXMGSC4An04zz5fgVPun7caToQAQMyjJHH8q/sqn1d0FH4Ovbh7kdGspmPjMe0EEYP3c8/auPowmmL6Z0e0QVEjPsDjhSN3LtzW+QAz5D0XGt5ZT32qiLQ1hkbyODy1pz961Wc8nXo54ngm9yjZBRsrQ3kMPcDuP39VHunFwtVnudJUOllkmh21Jlcwta+V3Pc8O57/HPmupV17JqEU7iMMBPfv5qOWT6Pbbg57mRte57XgOIAxvbucc9uC4/IJKSb5PQxWVhdy+LHqGg1bqWn1PbKN8cdzha+RrmOaPEBcz6ruWja1nB5znz4VMe2neXXbV+n7M4ZFBbXz7j/AE5Xlp7/APJH3q+7U6mbIzeGNmiYHtLCNrwR3BHyCy91xmdfOqF1mbP4kdN4VNHk5LQ1g3NH/eXfeVJovdaVXVpxVSUSpILc1xwSMjGDjnP5f6rxrLZKWMc1xYG5DgCd3HA5Hb5/5qYU9qIGXOGTwcjnHkPxC9zrTn9W9paCNpAx9iuVyuDzZX9FRVzZ6ijrZRI0AyRyY7N9D/Z5dis89WmFnUC6NOM7acnHlmCMrYwte4lrsAluXPxnJ48vuWRuucLafqne4W9m/Rh9v0aLK0axHDM9+xA0RFqZCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgN2XmQtYWiPjvkjHx8vNSyxahsWl9K2p18u0FHDUSGGN1Q/aHPe9xDST/AG9uFU2sonV+qYWOmAZSRQyRscwl2DK4yOaQMA+4wEu/ZzjJwDItUWG7X61WiStnMdDTRMbFTsLf1zjCBGS3OT+sLW+oJ7YcSKVRS7+TtyXI10Z97GQfh2UbvMxoL7TTzFwZVRGNowQMs5PPlncP/ErhV/WXpxpezvnrtY0VwmpoxH4VHMyomleB5BpxkkdyQ0HuQqXi61ai6la8p5o4zbrTQQOkjtrJPEEjzta5z34G52XccANAAAyXF00K5Sjn4FU1GxGkrjWzyW0zUUjDUEYbuwQCPVRKzWbVl2rmz1c9I/Mmx73S7DG05HbB45+3BX2abuQuVC2SI5wcPDjyPn8V16fSVbcbhG6lq3Q73AgFzjzwO3YDjt281FGe1tM9boroxe+SyWHomW46Pc9lx1G24UUTCYHOZtETWjJaCTy0EnB44xwOyqe4TOu1wq7jIwNfVzPneAeAXOLuPhnhSTq3V6l0J00rrpbaVlVUUzoGzueSWxwvcA9xAGSCAW447nnsDCNFazsGtaRstuma2qjb/GKR59+I+f8AWbns4cdux4XVoEpbpo871izdYo/mdeGjaX+79XPHHGV9YoTy0ABoBBIHl8+6+swsiBwSclecTnu2guwT5ZVkpLsymwc2Sia1m4jJHYbfLKxV7QrQzq/f2AEAfRRgjH81iW6JpSMBzMke7kfgsNe0W4u6y6hcRgn6J/hYVrKSbwZx5K3REWAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAbE6namptMWz9LPiZO8lsUTGuwHOdyMHBwMAn7CFXGufaEueodNDSVmtcVDRvooqWedz3OneQBvDSCA1rsFpBBJb3xnCiPUnqJVa3uDo4I/o1spn/xaDA3Hy3Px+0R5DgDgeZMJ+sMhclGmSjma5JJTeeDyLuchTro+CdTTHbnbTF3bt+sjP5KBjjj0U26RVQh1hFAf5zBLEPnjcP7q6LF7GjNLxYvuaUs1TPYq8zwAmCow6SMkfePQ/mrOsOra2pdFFbrZVul3hrT4BAx5+8Rj7T6KrqecS0sW/Odvujt8ME88dvJWtoFzYaLLp3OlIDGnAyOe378qqsSis4PRVSkuEWJq/Ss2pukOqKepYyapkoTO4jsTEd5A+QaR/8AV+bFBf7vpe6suNrrn01bSvG17eCCAMgjsQecg8HOCv1m0Y2lq7DU0FS1ro54nwvH9JrgA7HPplfkr1Et0lh1pqO1n3JKK6VFM9rh2LJXtx+Ck6Y3unE4OqLKizQXSTrNJq5/8H9Qujbc3n+LyxtDROMZIIHAcOe2AR8RzZ09U5khfG/a1oG5ru5Oe+AsM2e6z0NbDUU0kkE0L2yRyRuwWuByHA9xgjOfLC2B021TQ6307BcHyAVcAEFXGCPdkH7WMDhwwR5dwOQVY2Jte0qYNLuSo1TaiV7YsEtad20+nmD6fvysTe0c0N6zahA7Yo/8JCt1Ului8dz4mPJfx39eP7QsOe04wR9cdSsHl9D/AMHCtYNt8mZfwKuREUpoEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAdkkkjHxC/g45+KIs9geQzuPK7miK8WzV9pq3EBrapjHEn9lx2n8CiJjKMx4kma8isk7CYBHjd72MZ9Tn4c4/0Vp9MLMDIyOYBgjBcT35z+PmiKmubwenpSLipq3+D9jrrk1wEdNC57Q493YP54+9flL1Mr5q7Weo62pe501TdamWRzuS5xmeST9qIpunrDbOHqyxGKInBMYnGUEgtIxgqzunevLloi+MqaRzjR1JaamIZIfHkE4GR7wBJac9+M4OERWaW5PJRvjBsezXOCqhgrYZo5oamNskb25OY3YLcZ9QQsPe1J/x21NyD/uR4/6OBEUNaJG/BVSIilNQiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiID/9k=");
		json.put("content_2", "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/2wBDAQMDAwQDBAgEBAgQCwkLEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBD/wAARCAB4ASwDASIAAhEBAxEB/8QAHQABAAMBAAMBAQAAAAAAAAAAAAYHCAUCAwQJAf/EAEQQAAEDAwMCAwQGBAsJAAAAAAEAAgMEBREGEiEHMRNBUQgiYXEUMoGRocEVI0LwFiQzRFJysbK00eEJNDdzdIKSwvH/xAAbAQEAAgMBAQAAAAAAAAAAAAAAAwUBAgQGB//EAC8RAAICAQMDAwIDCQAAAAAAAAABAgMRBBIhBTFBEyJRBnEUgaEyM2GRscHR8PH/2gAMAwEAAhEDEQA/AIk20SRxgvftaQQ4AEkj4E4x5+X5L457dRXWcWitZKI65r4X7Gta7BYSeQTg/f8AmpNM2QxEF2SefeAyfPy+Pz4XCZ+puVO/bwwuIyeSNhGfxVIsLg7ERWToLp2OpNZBqO/RsY8TRwmoidFG/cXZY0x4HvOJ49SvFnQ7p7T1sFxmppHVEG3bMaiRrg4Dv7jgM/v5qcVFe4hoBJ3Dg/d2ys+9Z+tMtFPU6U0vVSMqY3GKsqmkYbxyxhOTnJwTwQRwumNl1vtTMOMYvOCxtV+0lp/RtmstnttC2717ohNUxx1m1tLxjY521xLs5yDyAAT3CrKzdZYayfZeLWKeAu2maJxdsB7bgRz28s/Ljmg2TP8AF3F5PC6lqromzDxg8s590OwXfD4eas9HZPRfu39zhvqhqP20bLtldadS6SprfWXIUlLJUtdSVkcu18UrHtmZICCDjJGcEEgDBBwRxKi49WbTeJqCso236e10jYo4KaujbHPj3WPLiC/J2e8HYycOOPOjtHdQKzTjZ9PPl+j0V0AibI1zRJRPPd7XO+qC3h3Y9iCCFOejHUSwaB1HV6mvdvNVb5KOWlMe/JYXvbtORjJyMfauTVXT9WU2sqTzj/BYaXS120pZacF/MqfqhZOpdNqb9Ka609cKCa4kik8VpdG5ke3LI5Blsm0PZnBJy4F3LuedcqDUFkaygu1MKYytDml0jnBzCAS4bctII9M9j2WqPaI9oTQnVhmhrZpm0RU1Hp1k8ss1PuZI4TMb4kTfRhdFHuJzud6bCT6ukurNMaihuumr9Q0lbRyFlZHT1MLHxM+s0lgIwxw38kYOXfBS1WppOSwcVsUm9pzujHVKnh6SU+lq+F/6QpKyqpIRF7rhCS2XxJCeQcyva3A52AcLLHXK6svfVO+3KPbsldAGFrtwLWwRtBz8QM/DstLVuh7HF1BvFi07cBbRPTR1tvawePGWtyySMlzt7DzD5njceeAsvdW7NV6f6hXa0VzYWz05h3+C4lhLoWOyMgcHOewxnsFNsqS3QfL8EMLLZSxNcfJEERFgmCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgP1AqH4iecNAb9Ucc/BcAuYK9rDI1j/CkcAB3Ac0fPsV0bvUy0tuqqmnEYlax2zxAS1jj2Lsc7RkE45woLBLc662STunkqqhtPVQiWJzA6ZplAD2FnAdtacY88KkSeDs4Pfr/WVJonS1Zeq6RkjoYzHAwnAlmcPdaPzxnABPksWV1fVV9VNW1cplqKmR00zz3c9xJcftJKs/2gaeayy2DT0TphQMoo7hDFKcuY+oijfI3IxwHFwAxwPmqroIn1FRHHjO5waFYUQ2x3fJBN7ngRty7J7gL77RR1FXUu8CEybASfn5KRWrRdZW3RkIgLWl4cT243AEfNXHoTpnT0TqqaSDZDLG09uXd89x2zwpJ3xriT06SVrKfqtO3CXwHxUTjhp3Nazl/B5+PYr12nU0LbfPRVNNO6Q7WvmZMGhrN7cHGw+fB78Htlbf0J0kst2qqOGW37oXCSeVziTmTZsY3DhjHvvPwICxP1G0y7RWtdXabbC4soamWCLywwVDSwn5gfio67o3eOUb3aeWmeE+Hx+hP6DpZrd+mob7aNKC5UP0KlqGPiqnPIjnldGxuMtOQRucADtaQ52ByIRdrrf9HXm52ae2xW642hrXOaGB5a4uZjBJcHNLH9wcEHI8lsbonpx1V0LrL2+mgkkfpO3Np3SgEA/SpuQTnH8oB9/yWbusNht8fW7UFiu9a2mqn6fpXSyO5g8T9ERTtOQNzQ0iMY2uJwTnOGqwhJSh2KqUcNlbUHUTUcVWyohq2073F259PCyN5J+LQD6KF65uk961RV3KpkfJLK2EOc+QvcS2Jjckn5fZ2Vr0mlLTdatkTrFc3Qi3OlxY6iC7kVBeMZEbg6mi254eZHjaM53HFPaoijg1BWwQvkfHHJsY6Vmx7mgAAub5HHcKNy3EqrUeUctERYMhERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQH6W3y40FttlZcbnK1lLSwyTTOc0uwxrS53AyTwDwPRRTT11prlboa6kdHI2aihlD42lrSHgnIacEZPODz6qRXR1lH6rUDon22SRkdRHKAWSMJw5pB4OQSMFRXTNtpLNFPS29rPDgpqenjY0+61oc/Hf8Arc/AKlWMHZy3hFIe1S41OprPWiMhrqBkGS0Al0bWtPY9s9vgR8VEem2kIbzFLX1Zc2OJzdpxxnnPw9FMPaSp7dLVWSvoaxlQ/ZLTzhsheY3NIcA448w/1J4PlhSHpJbqKDS9E+pDAZsP2l2CS52Rx3JJA4+K7oNqlKPkzRWpW4l4O/piq05RVcVLWxvimzkEt7emfj+auSKggZRwS0sbS2TAy3HABGPmoqYrXVUuyfTdY5zGZ3/o+XGBydztuAPPnjhdrS9wprpRtZaZ2TxRuc0bXZA7gjPwII+xY1OlnVh2xcfumv6l5p5Y4yi3tFaq03Zo20tdO1la5xETNhcH4H1c+R9MrE/tXNoB1uv1eyNzaS4CKUNIIywxRkg+YIkDwfQhaT0JrTp5S6xpINR3SgiDZmeK6eZoDRnvyewwfuVMe3rLZLr1e/Sun62kqqGtt0VSyopntdHNumnG8FvByAO3oo9PGMZcfBw69Sa5K9oPaL6h2jTdPpO26tkhtMFGygjpmUcO3wGOLmsJLMnB8yc9uVEtQ61i1Vc5b1qF7q64TtayapfG0Sva2PwgC4AEgRgNx6BRGKkMoHOAO3wXvNCARkDk4810qW3sVXplvXXX/SOq6X2m0xaMpYtV0oIlq6ShjgDW+K4Ze4DMzzG1nB4G4nORhUBrWvFz1NV1rd2HiIDcckBsTW/kpC+LY0uAGMe8cKIXwEXSbPf3f7oW9byzSUcHwoiKU0CIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgNS+1FV1DpNPSwVQidE6pDdji15JEfIx5D/ANvPlfTpLUNRUaHphXaopaKolhiYZJ6lrHva1mTy45z77efkoX1Ss9ZapYZL9dTcnvikeyEUxhaxo2jeRnI3EgeufPAIUw6b+z5pfVmlxd7peLuZXTFrPBdG1gbsaezmOPn69sLhW1UrLOnlT3I+fVdpsurNNQ2K3agt89ZC/wAelgp52Pe8gOyAM57ZcT8yVK+h1iukFkNa3dulo6Y0p3bgyPkSBw4I3OMWO/AcMjz+iydALFo+7w3+ivFfO+jbIWMm2FuC1zTnaB5OJHxVgdHIG0Gm7dG3a5rqKGF4IByAGnH3tCtOg9Rr6b1KjUWcxjJN8fr/AHOqqj1YNrv/AMPnr9JawltbauC91sFRBM4yCOpexj2ZaQNjCBkbS3ByCHnzAXw6SpNQX7UN5loa240dVRUBpi6jdFuc+MybiI5I5G7jj0J27cYyFcFZW01PT7GUjXSY907sYI+zlcro1LBRdQqSSOH6lVh+0Y9/jIJx8MH5L6B9d/Weg6z05aXTJOWVyljju+6/3JPpNBKFm55wyA3DRFy1LetN1Nn1NXaToYpzNPWUXjQzCm2txtYxzRn3fd7DDwcHGDR/tNVd5m6g3uWvjr5qWRttjjraiAM8d7KRjN7QR7jX4ldtacZIyMgEbvptM0B1lWUUtGSyiq3sbG7LzIzd7r3HJJLshzj5lxPnhVB/tCtG3Ctm0v8ARJKSmbdofEqGBhLmmkaWRbTgfs1UmRj9lvpz831vUIdT1nq11qEWksL5S5f59zXUaf8AD0JNtvzkwKyoqOdkmB5Dj/JeYqKgd5TjPfI4Uuh6VVr/AHXXtjTgZHh+X3r2u6TzsGX3wgFwbxDx3+fosKl/BVuxEOikfJukle7w2HAGe5+5Ra+PL7pO89zt/uhXA/pRJ4Icb0QAOAKfgfH6yqvWdpfY9S1lrkm8V0Ph5fjGd0bXfmsqtw5ZrKalwjioiLY1CIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgND9ZrFqys1JU18FMJqCohhgHh7WyNa1xJYec8uO7jjG3040B0Tt01B0/pY5nH9bM9/HcNGG/byz8Vwb3RRP96RjXMGSC4An04zz5fgVPun7caToQAQMyjJHH8q/sqn1d0FH4Ovbh7kdGspmPjMe0EEYP3c8/auPowmmL6Z0e0QVEjPsDjhSN3LtzW+QAz5D0XGt5ZT32qiLQ1hkbyODy1pz961Wc8nXo54ngm9yjZBRsrQ3kMPcDuP39VHunFwtVnudJUOllkmh21Jlcwta+V3Pc8O57/HPmupV17JqEU7iMMBPfv5qOWT6Pbbg57mRte57XgOIAxvbucc9uC4/IJKSb5PQxWVhdy+LHqGg1bqWn1PbKN8cdzha+RrmOaPEBcz6ruWja1nB5znz4VMe2neXXbV+n7M4ZFBbXz7j/AE5Xlp7/APJH3q+7U6mbIzeGNmiYHtLCNrwR3BHyCy91xmdfOqF1mbP4kdN4VNHk5LQ1g3NH/eXfeVJovdaVXVpxVSUSpILc1xwSMjGDjnP5f6rxrLZKWMc1xYG5DgCd3HA5Hb5/5qYU9qIGXOGTwcjnHkPxC9zrTn9W9paCNpAx9iuVyuDzZX9FRVzZ6ijrZRI0AyRyY7N9D/Z5dis89WmFnUC6NOM7acnHlmCMrYwte4lrsAluXPxnJ48vuWRuucLafqne4W9m/Rh9v0aLK0axHDM9+xA0RFqZCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgN2XmQtYWiPjvkjHx8vNSyxahsWl9K2p18u0FHDUSGGN1Q/aHPe9xDST/AG9uFU2sonV+qYWOmAZSRQyRscwl2DK4yOaQMA+4wEu/ZzjJwDItUWG7X61WiStnMdDTRMbFTsLf1zjCBGS3OT+sLW+oJ7YcSKVRS7+TtyXI10Z97GQfh2UbvMxoL7TTzFwZVRGNowQMs5PPlncP/ErhV/WXpxpezvnrtY0VwmpoxH4VHMyomleB5BpxkkdyQ0HuQqXi61ai6la8p5o4zbrTQQOkjtrJPEEjzta5z34G52XccANAAAyXF00K5Sjn4FU1GxGkrjWzyW0zUUjDUEYbuwQCPVRKzWbVl2rmz1c9I/Mmx73S7DG05HbB45+3BX2abuQuVC2SI5wcPDjyPn8V16fSVbcbhG6lq3Q73AgFzjzwO3YDjt281FGe1tM9boroxe+SyWHomW46Pc9lx1G24UUTCYHOZtETWjJaCTy0EnB44xwOyqe4TOu1wq7jIwNfVzPneAeAXOLuPhnhSTq3V6l0J00rrpbaVlVUUzoGzueSWxwvcA9xAGSCAW447nnsDCNFazsGtaRstuma2qjb/GKR59+I+f8AWbns4cdux4XVoEpbpo871izdYo/mdeGjaX+79XPHHGV9YoTy0ABoBBIHl8+6+swsiBwSclecTnu2guwT5ZVkpLsymwc2Sia1m4jJHYbfLKxV7QrQzq/f2AEAfRRgjH81iW6JpSMBzMke7kfgsNe0W4u6y6hcRgn6J/hYVrKSbwZx5K3REWAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAbE6namptMWz9LPiZO8lsUTGuwHOdyMHBwMAn7CFXGufaEueodNDSVmtcVDRvooqWedz3OneQBvDSCA1rsFpBBJb3xnCiPUnqJVa3uDo4I/o1spn/xaDA3Hy3Px+0R5DgDgeZMJ+sMhclGmSjma5JJTeeDyLuchTro+CdTTHbnbTF3bt+sjP5KBjjj0U26RVQh1hFAf5zBLEPnjcP7q6LF7GjNLxYvuaUs1TPYq8zwAmCow6SMkfePQ/mrOsOra2pdFFbrZVul3hrT4BAx5+8Rj7T6KrqecS0sW/Odvujt8ME88dvJWtoFzYaLLp3OlIDGnAyOe378qqsSis4PRVSkuEWJq/Ss2pukOqKepYyapkoTO4jsTEd5A+QaR/8AV+bFBf7vpe6suNrrn01bSvG17eCCAMgjsQecg8HOCv1m0Y2lq7DU0FS1ro54nwvH9JrgA7HPplfkr1Et0lh1pqO1n3JKK6VFM9rh2LJXtx+Ck6Y3unE4OqLKizQXSTrNJq5/8H9Qujbc3n+LyxtDROMZIIHAcOe2AR8RzZ09U5khfG/a1oG5ru5Oe+AsM2e6z0NbDUU0kkE0L2yRyRuwWuByHA9xgjOfLC2B021TQ6307BcHyAVcAEFXGCPdkH7WMDhwwR5dwOQVY2Jte0qYNLuSo1TaiV7YsEtad20+nmD6fvysTe0c0N6zahA7Yo/8JCt1Ului8dz4mPJfx39eP7QsOe04wR9cdSsHl9D/AMHCtYNt8mZfwKuREUpoEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAdkkkjHxC/g45+KIs9geQzuPK7miK8WzV9pq3EBrapjHEn9lx2n8CiJjKMx4kma8isk7CYBHjd72MZ9Tn4c4/0Vp9MLMDIyOYBgjBcT35z+PmiKmubwenpSLipq3+D9jrrk1wEdNC57Q493YP54+9flL1Mr5q7Weo62pe501TdamWRzuS5xmeST9qIpunrDbOHqyxGKInBMYnGUEgtIxgqzunevLloi+MqaRzjR1JaamIZIfHkE4GR7wBJac9+M4OERWaW5PJRvjBsezXOCqhgrYZo5oamNskb25OY3YLcZ9QQsPe1J/x21NyD/uR4/6OBEUNaJG/BVSIilNQiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiID/9k=");


		try {
			org.apache.http.HttpResponse response = HttpUtils.doPost(host, path, method, headers, querys, json.toJSONString());
			System.out.println(response.toString());
			System.out.println();
			System.out.println();
			System.out.println();
			System.out.println();
//			System.out.println(EntityUtils.toString(response.getEntity()));
			JSONObject jsonOb = JSON.parseObject(EntityUtils.toString(response.getEntity()));
			BigDecimal d = (BigDecimal)jsonOb.get("confidence");
			System.out.println(d.intValue());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


}
